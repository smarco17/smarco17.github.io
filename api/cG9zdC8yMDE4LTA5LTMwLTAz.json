{"title":"Geant4サンプルプログラム -template-","date":"2018-09-30T11:38:39.000Z","excerpt":"","slug":"2018-09-30-03","comments":true,"tags":["Geant4"],"updated":"2018-10-01T00:28:13.689Z","content":"<p>Geant4のサンプルプログラム-<a href=\"https://github.com/smarco17/geant4/tree/master/sampleProject/template/TEMPLATE\" target=\"_blank\" rel=\"noopener\">template</a>-を公開しました。</p>\n<p>空気で満たしたWorldにGeantino(輸送のみを行い、相互作用を一切しない粒子)を打ち込むだけのプログラムですが、全ての要素が詰まっています。まさにGeant4のひな型です。<br>このコードを拡張していくことで、たいていのシミュレーションは事足りるかと思います。</p>\n<p>後々このコードの詳細の解説もしたいと思います。<br>それまでのつなぎとして、簡単にコードを見ていきたいと思います。<br>(間違いもあると思うので、あまり鵜呑みにせず参考程度に留めておいてください。)</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.hh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DetectorConstruction: public G4VUserDetectorConstruction&#123;</span><br><span class=\"line\">  public:</span><br><span class=\"line\">    DetectorConstruction();</span><br><span class=\"line\">    virtual ~DetectorConstruction();</span><br><span class=\"line\">    virtual G4VPhysicalVolume* Construct();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>DetectorConstructionはジオメトリを記述するクラスです。最も重要かつ基本的なクラスで例えば、検出器、ターゲット、遮蔽材等、シミュレーションの使用する全ての構造物を記述します。もちろん名前は何でも構いません。ですがファイル名とクラス名を別にする必要は全くと言っていいほどないので、そこは同じにするべきです。</p>\n<p>ここで最も重要なことは、G4VUserDetectorConstructionを継承し、そのコンストラクタ、デストラクタ、そしてConstruct関数をオーバーライドするということです。これは義務であり、これを行わないことは許されません。</p>\n<p>それでは中身を見ていきます。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DetectorConstruction::DetectorConstruction():G4VUserDetectorConstruction()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DetectorConstruction::~DetectorConstruction()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>このプログラムにおいてはコンストラクタ、デストラクタには何も記述していません。ですがコンストラクタ、デストラクタが呼び出されるタイミングで定義したいことももちろんあると思いますので、呼び出しのタイミングについては確認しておくと良いかもしれません。(例えば後から動的にジオメトリを変更する機能(messanger)を実装する場合、静的なものはコンストラクタで定義し、動的なモノはConstruct関数で定義することで、再度Construct関数を呼び出した時に無駄な動作を少なくすることができます。)</p>\n<p>それではこのプログラムにおいて一番重要なConstruct関数を見ていきます。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4VPhysicalVolume* DetectorConstruction::Construct()&#123;</span><br><span class=\"line\">  // 物質マネージャー</span><br><span class=\"line\">  //</span><br><span class=\"line\">  G4NistManager* nist = G4NistManager::Instance();</span><br><span class=\"line\">  G4Material* worldMat = nist-&gt;FindOrBuildMaterial(&quot;G4_AIR&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // World</span><br><span class=\"line\">  G4double worldXYZ = 1.*cm;</span><br><span class=\"line\">  G4Box* solidWorld = new G4Box(&quot;World&quot;, worldXYZ/2, worldXYZ/2, worldXYZ/2);</span><br><span class=\"line\"></span><br><span class=\"line\">  G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld, worldMat, &quot;World&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  G4VPhysicalVolume* physWorld = new G4PVPlacement(0,                      // no rotation</span><br><span class=\"line\">                                                   G4ThreeVector(0, 0, 0), // at (0,0,0)</span><br><span class=\"line\">                                                   logicWorld,             // its logical volume</span><br><span class=\"line\">                                                   &quot;World&quot;,                // its name</span><br><span class=\"line\">                                                   0,                      // its mother  volume</span><br><span class=\"line\">                                                   false,                  // no boolean operation</span><br><span class=\"line\">                                                   0,                      // copy number</span><br><span class=\"line\">                                                   true);                  // overlaps checking</span><br><span class=\"line\">  </span><br><span class=\"line\">  return physWorld;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>まずはWorldを定義します。Worldとは簡単に言ってしまえば、計算領域のことで、全ての他の構造物の母体となります。そのため、Worldを一番初めに必ず定義し、かつすべての他の構造物はWorldに含まれている必要があります。例えば、Worldが1cm四方の立方体だとすると、(0, 0, 2cm)には構造物を置くことはできません。</p>\n<p>また全ての構造物は何かの物質で満たす必要があります。何もない空間というのは存在できません。そのため、このプログラムでは、G4NistManagerというクラスを使用しています。G4NistManagerクラスでは、鉄やタングステンといった元素だけでなく、空気や水といった代表的な物質を受け取ることができます。またこのクラスを使用せずに、自ら物質を定義する方法もあります。かなり自由度が高く、実際には存在しない物質も定義することができます。(例えば、タングステンの密度を持った空気や1億度の鉄など)</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4NistManager* nist = G4NistManager::Instance();</span><br><span class=\"line\">G4Material* worldMat = nist-&gt;FindOrBuildMaterial(&quot;G4_AIR&quot;);</span><br></pre></td></tr></table></figure>\n<p>これがG4NistManagerから物質を受け取る方法の流れです。まず<code>G4NistManager::Instance()</code>でインスタンスを受け取り、<code>nist-&gt;FindOrBuildMaterial(&quot;name&quot;)</code>で指定した物質を受け取ることができます。nameにはG4_ + “元素記号” または G4_ + “物質名” で事前に定義されているもの指定します。定義された物質の一覧は<a href=\"http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/BackupVersions/V9.4/html/apas09.html\" target=\"_blank\" rel=\"noopener\">こちら</a></p>\n<p>次に実際にWorldを定義します。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4double worldXYZ = 1.*cm;</span><br><span class=\"line\">G4Box* solidWorld = new G4Box(&quot;World&quot;, worldXYZ/2, worldXYZ/2, worldXYZ/2);</span><br><span class=\"line\"></span><br><span class=\"line\">G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld, worldMat, &quot;World&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">G4VPhysicalVolume* physWorld = new G4PVPlacement(0,                      // no rotation</span><br><span class=\"line\">                                                 G4ThreeVector(0, 0, 0), // at (0,0,0)</span><br><span class=\"line\">                                                 logicWorld,             // its logical volume</span><br><span class=\"line\">                                                 &quot;World&quot;,                // its name</span><br><span class=\"line\">                                                 0,                      // its mother  volume</span><br><span class=\"line\">                                                 false,                  // no boolean operation</span><br><span class=\"line\">                                                 0,                      // copy number</span><br><span class=\"line\">                                                 true);                  // overlaps checking</span><br></pre></td></tr></table></figure>\n<p>Worldに限らず構造物の定義、配置には大きく分けて3つのステップに分類されます。<br>1つ目のステップをsolidステップと名付けます。(ここだけの用語なので、他では使われていないです。)<br>solidVolumeとは概念のようなもので、主に構造物の形のみを記憶しています。そのため、その構造物が何でできているか、どこに配置するのかといった情報は持っていません。持っているのは、自分がどんな形(直方体、円柱、etc))で、どのくらいの大きさ(寸法)かということだけです。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4double worldXYZ = 1.*cm;</span><br><span class=\"line\">G4Box* solidWorld = new G4Box(&quot;World&quot;, worldXYZ/2, worldXYZ/2, worldXYZ/2);</span><br></pre></td></tr></table></figure>\n<p>これがsolidVolumeの定義です。G4Boxクラスを使用すると直方体が定義できます。コンストラクタの引数は、順番にsolidの名前、X軸に平行な一辺の長さの1/2, Y軸に平行な一辺の長さの1/2 Z軸に平行な一辺の長さの1/2となっています。Geant4の仕様で長さはその位置から「±一辺の長さ」となっているので、1/2を忘れてはいけません。例えば1cm四方の直方体の計算領域を作成するために<code>G4Box* solidWorld = new G4Box(&quot;World&quot;, 1*cm, 1*cm, 1*cm)</code>とすると2cm四方の直方体が作成されてしまいます。簡単に創造できる形状の一覧は<a href=\"http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/html/Detector/Geometry/geomSolids.html#constructed-solid-geometry-csg-solids\" target=\"_blank\" rel=\"noopener\">こちら</a>です。もっと複雑な形状を表現したいときは、boolean操作やGDMLで形状を表現しますが、ここでは省略します。多くのシミュレーションではこれで事足ります。</p>\n<p>2つ目のステップはlogicalステップです。</p>\n<p>logicalVolumeとはその物質が何でできているかの情報を持ちます。</p>\n<figure class=\"highlight c++\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4LogicalVolume* logicWorld = <span class=\"keyword\">new</span> G4LogicalVolume(solidWorld, worldMat, <span class=\"string\">\"World\"</span>);</span><br></pre></td></tr></table></figure>\n<p>これがlogicalの定義です。G4LogicalVolumeの引数は、順番にlogicalへと進化させたいsolid、solidの中身を満たしたい物質、logicalの名前となっています。</p>\n<p>3つ目のステップ、つまり最後のステップはphysicalステップです。<br>physicalVolumeは親要素を原点として、どこの位置に配置されるか、また回転やID等の多くの情報を持ちます。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction.cc</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4VPhysicalVolume* physWorld = new G4PVPlacement(0,                      // no rotation</span><br><span class=\"line\">                                                 G4ThreeVector(0, 0, 0), // at (0,0,0)</span><br><span class=\"line\">                                                 logicWorld,             // its logical volume</span><br><span class=\"line\">                                                 &quot;World&quot;,                // its name</span><br><span class=\"line\">                                                 0,                      // its mother  volume</span><br><span class=\"line\">                                                 false,                  // no boolean operation</span><br><span class=\"line\">                                                 0,                      // copy number</span><br><span class=\"line\">                                                 true);                  // overlaps checking</span><br></pre></td></tr></table></figure>\n<p>これがphysicalVolumeの定義です。G4PVPlacementクラスのコンストラクタの引数は順番に、回転、位置座標、logicalVolume、その名前、親要素、boolean操作、ID、重なりチェックとなっています。<br>注意すべきなのは、親要素が0となっているところで、Worldには親要素は存在しません。そもそも全ての親がWorldですから。<br>回転には、G4RotationMatrixクラスを、並進操作にはG4ThreeVectorクラスを使用する必要があります。G4ThreeVectorの3つの引数は、それぞれ(x, y, z)の座標を示しています。G4RotationMatrixの扱い方は後日とします。現段階では、Worldを回しても意味がありませんから。</p>\n<p>またlogicalVolumeを渡します。何となく流れが見えたでしょうか。solidVolumeを定義し、logicalVolume進化させ、そのlogicalVolumeをphysicalVolumeへと進化させます。それぞれsolidVolume &lt; logicalVolume &lt; physicalVolumeという風に情報量が増えていきます。</p>\n<p>名前は一貫して、Worldとしてあります。名前を変えることはできるかもしれませんが分かりにくくなるだけなので、特別な場合を除きする必要はないと思います。</p>\n<p>boolean操作、ID, 重なりチェックについては今回は説明しません。勘のいいひとはもうわかっているかもしれませんが。</p>\n<p>そして最後に重要なことは、定義したワールドを返り値にて、返却するということです。これは義務であり、権利ではありません。</p>\n<figure class=\"highlight plain\"><figcaption><span>DetectorConstruction</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G4VPhysicalVolume* DetectorConstruction::Construct()&#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  return physWorld;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>今回はここまでにしておきます。</p>\n<p>解説できたのは一つのクラスでしかありませんが、少しはGeant4の雰囲気を感じられたかと思います。Geant4を学ぶ上で覚えていてほしいことなのですが、Geant4はソースコードを見るだけで何をしているかが何となくわかるということです。例えばある個所において、G4RotationMatrixクラスが使用されていたら、回転操作をしているということが分かります。他のシミュレーションソフトウェアを悪く言うわけではありませんが、直観的な操作が行えないことが多いです。例えばPhitsでは、覚えるべきことが多く、そのたびにマニュアルを片手にパラメータを入力していくことが多いように感じました。(もちろん優れたソフトウェアなのですが。)</p>\n<p>ソースコードを見れば何となく何をしているかわかるということの利点は、拡張という点でも大きな利点があります。Geant4でも少し凝ったシミュレーションを行いたい場合(例えば、物理モデルを変更する、任意の磁場を生成する)、組み込みのコードを読まなければならない状況に陥ります。しかし、少し慣れると普段のプログラムを作成していく延長でそれが行えるようになります。他のシミュレーションソフトウェアではそれを行おうとすると、一気に難易度が上がります。というのもユーザーは、ただ単に指定したパラメータを決めていくだけで済んでしまうからです。そのため、そのような機能を選択するパラメータが存在しなければ、自分でそのパラメータを作成することはできず、あきらめるしか他なりません。それか内部のコードを読むかですが、非常に難しいでしょう。</p>\n<p>しかしGeant4ではそれができます。それどころか、ユーザーがGeant4の発展に貢献することができます。それはひとえに”見かけの”内部的な動作を記述していくGeant4のプログラムのおかげです。Geant4は難易度が高いと言われますが、それは利点でもあります。最初はハードルが高いかもしれませんが、一度慣れれば、Geant4の素晴らしさに気づくと思います。(もちろん他のソフトウェアから学ぶ点は多くあると思いますが。)</p>\n<p>長くなってしまいましたが、少しでもやる気のある方はGeant4を使用することをお勧めします。c++の構文もそこまで高度な内容はありません。(演算子のオーバーロード、型変換くらいまでの内容を抑えていれば問題ありません。もちろんクラスプログラミングは必須ですが。)自分のやりたいことが今使っているソフトウェアではできないと知ったときに、他のツールを使うのでは時間がもったいないです。Geant4では自分のしたいことは全てと言っていいほどできます。なにしろ自分でGeant4を作っていくことさえできるのですから。</p>\n","prev":{"title":"Geant4のLinux(Ubuntu on WSL)へのインストール方法","slug":"2018-10-12-01"},"next":{"title":"Geant4のLinux(Ubuntu)へのインストール方法","slug":"2018-09-30-02"},"link":"https://ricca17.herokuapp.com/post/2018-09-30-03"}